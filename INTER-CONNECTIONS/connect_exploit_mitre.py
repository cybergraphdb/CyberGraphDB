import re
from neo4j import GraphDatabase

class Neo4jMetasploitAnalyzer:
    def __init__(self, uri, user, password):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def run_query(self, query, parameters=None):
        with self.driver.session() as session:
            result = session.run(query, parameters)
            return result.data()


    def get_all_malware_names(self):
        query = "MATCH (malware:Malware) RETURN malware.name AS name"
        return self.run_query(query)

    def get_all_metasploit_descriptions(self):
        query = "MATCH (desc:MetasploitDescription) RETURN desc.id AS id, desc.description AS description"
        return self.run_query(query)
    
    def get_all_metasploit_descriptions(self):
        query = """
        MATCH (file:MetasploitScript)-[:HAS_DESCRIPTION]->(desc:MetasploitDescription)
        RETURN desc.id AS id, desc.description AS description, file
        """
        return self.run_query(query)

    def create_mention_relationship(self, file_name, malware_name):
        query = """
        MATCH (file:MetasploitScript {name: $file_name})
        MATCH (malware:Malware {name: $malware_name})
        MERGE (file)-[:MENTIONS_MALWARE]->(malware)
        """
        parameters = {'file_name': file_name, 'malware_name': malware_name}
        self.run_query(query, parameters)

    def check_malware_mentions_in_descriptions(self, descriptions, malware_names):
        malware_names_lower = {name.lower(): name for name in malware_names}
        for description in descriptions:
            desc_id = description['id']
            desc_text = description['description'].lower()
            file = description['file']
            file_name = file['name']
            desc_words = desc_text.split(" ")
            for lower_name, original_name in malware_names_lower.items():
                if original_name != "at":
                    if lower_name in desc_words or original_name in desc_words:
                        print(f"Found mention of MALWARE {original_name} in description {file_name}: \n{desc_text}")
                        self.create_mention_relationship(file_name, original_name)
            # for lower_name, original_name in malware_names_lower.items():
            #     pattern = r'\b' + re.escape(lower_name) + r'\b'
            #     if re.search(pattern, desc_text):
            #         print(f"Found mention of {original_name} in description {desc_id}")
            #         self.create_mention_relationship(file_id, original_name)

if __name__ == "__main__":
    uri = "bolt://localhost:7688"
    user = "neo4j"
    password = "scottdirT98"
    
    analyzer = Neo4jMetasploitAnalyzer(uri, user, password)
    
    print("Fetching all malware names...")
    malware_names = [record['name'] for record in analyzer.get_all_malware_names()]
    print(malware_names)
    print("Fetching all Metasploit descriptions...")
    metasploit_descriptions = analyzer.get_all_metasploit_descriptions()
    print(metasploit_descriptions)
    print("Checking for malware mentions in descriptions...")
    analyzer.check_malware_mentions_in_descriptions(metasploit_descriptions, malware_names)
    
    print("Completed checking for malware mentions in descriptions.")
    
    analyzer.close()
