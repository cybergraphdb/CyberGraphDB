import logging
from py2neo import Graph

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Connessione a Neo4j
graph = Graph("bolt://localhost:7687", auth=("neo4j", ""))


def run_query(query):
    try:
        return graph.run(query).to_data_frame()
    except Exception as e:
        logging.error("Error executing query: %s", e)
        return None


# Query 1: Malware with multiple associated names
query1 = """
MATCH (m:MalwareFile)-[:HAS_NAME]->(n:MalwareName)
WITH m, COUNT(n) AS nameCount
WHERE nameCount > 1
RETURN m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`, nameCount AS `Number of Names`
ORDER BY nameCount DESC
"""
result1 = run_query(query1)
logging.info("Malware with multiple associated names:")
logging.info(result1)

# Query 2: Malware with specific tags
query2 = """
MATCH (m:MalwareFile)-[:HAS_TAG]->(t:MalwareTag)
WHERE t.tag IN ['executable', 'dos']
RETURN DISTINCT m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`
"""
result2 = run_query(query2)
logging.info("Malware with specific tags (executable, dos):")
logging.info(result2)

# Query 3: Malware classified as specific threats
query3 = """
MATCH (m:MalwareFile)-[:CLASSIFIED_AS]->(th:ThreatName)
WHERE th.name = 'zusy'
RETURN m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`, th.count AS `Threat Count`
ORDER BY `Threat Count` DESC
"""
result3 = run_query(query3)
logging.info("Malware classified as zusy:")
logging.info(result3)

# Query 4: Engines identifying specific malware
specific_sha256 = "9a53522752be11dc99d784637a6aed839417fb4ef40f3da23e177e19f32fcc3e"  # Replace with specific SHA256
query4 = f"""
MATCH (m:MalwareFile {{sha256: '{specific_sha256}'}})-[:ANALYZED_BY]->(e:AnalysisEngine)
RETURN e.name AS `Analysis Engine`, e.result AS `Detection Result`
"""
result4 = run_query(query4)
logging.info(f"Engines identifying malware with SHA256 {specific_sha256}:")
logging.info(result4)

# Query 5: Number of malware by type description
query5 = """
MATCH (m:MalwareFile)
RETURN m.type_description AS `Type Description`, COUNT(m) AS `Malware Count`
ORDER BY `Malware Count` DESC
"""
result5 = run_query(query5)
logging.info("Number of malware by type description:")
logging.info(result5)

# Query 6: Malware sharing the same names
query6 = """
MATCH (m1:MalwareFile)-[:HAS_NAME]->(n:MalwareName)<-[:HAS_NAME]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN n.name AS `Common Name`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result6 = run_query(query6)
logging.info("Malware sharing the same names:")
logging.info(result6)

# Query 7: Malware sharing the same tags
query7 = """
MATCH (m1:MalwareFile)-[:HAS_TAG]->(t:MalwareTag)<-[:HAS_TAG]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN t.tag AS `Common Tag`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result7 = run_query(query7)
logging.info("Malware sharing the same tags:")
logging.info(result7)

# Query 8: Malware analyzed by the same engines
query8 = """
MATCH (m1:MalwareFile)-[:ANALYZED_BY]->(e:AnalysisEngine)<-[:ANALYZED_BY]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN e.name AS `Common Analysis Engine`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result8 = run_query(query8)
logging.info("Malware analyzed by the same engines:")
logging.info(result8)

# Query 9: Malware sharing the same threat types
query9 = """
MATCH (m1:MalwareFile)-[:CLASSIFIED_AS]->(t:ThreatName)<-[:CLASSIFIED_AS]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN t.name AS `Common Threat`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result9 = run_query(query9)
logging.info("Malware sharing the same threat types:")
logging.info(result9)

# Query 10: Malware with similar sizes (e.g., +/- 100 bytes)
query10 = """
MATCH (m1:MalwareFile), (m2:MalwareFile)
WHERE m1 <> m2 AND ABS(m1.size - m2.size) <= 100
RETURN m1.id AS `Malware ID 1`, m1.sha256 AS `SHA256 Hash 1`, m2.id AS `Malware ID 2`, m2.sha256 AS `SHA256 Hash 2`, m1.size AS `Size 1`, m2.size AS `Size 2`
"""
result10 = run_query(query10)
logging.info("Malware with similar sizes (+/- 100 bytes):")
logging.info(result10)
