from neo4j import GraphDatabase

class Neo4jConnection:
    def __init__(self, uri, user, password):
        self._driver = GraphDatabase.driver(uri, auth=(user, password))
        print("\n[!] Database Connection: SUCCESSFULL")

    def close(self):
        self._driver.close()

    def rename_relationships(self):
        with self._driver.session() as session:
            # Rinominare le relazioni tra Technique e Mitigation
            session.write_transaction(self._rename_relationship, "Technique", "Mitigation", "HAS_TECHNIQUE", "HAS_MITIGATION")
            # Rinominare le relazioni tra Technique e Detection
            session.write_transaction(self._rename_relationship, "Technique", "Detection", "HAS_TECHNIQUE", "HAS_DETECTION")
            # Rinominare le relazioni tra Technique e Procedure
            session.write_transaction(self._rename_relationship, "Technique", "Procedure", "HAS_TECHNIQUE", "HAS_PROCEDURE")

    @staticmethod
    def _rename_relationship(tx, start_node_label, end_node_label, old_rel, new_rel):
        query = f"""
        MATCH (start:{start_node_label})-[r:{old_rel}]->(end:{end_node_label})
        CALL apoc.refactor.rename.type(type(r), "{new_rel}") YIELD committedOperations
        RETURN committedOperations
        """
        tx.run(query)

# Esempio di utilizzo
conn = Neo4jConnection("bolt://localhost:7688", "neo4j", "scottdirT98")
conn.rename_relationships()
conn.close()
