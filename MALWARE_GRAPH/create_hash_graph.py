import json
import os

from py2neo import Graph, Node, Relationship

# Connessione a Neo4j
graph = Graph("bolt://localhost:7688", auth=("neo4j", "scottdirT98"))

# Percorso principale delle cartelle
main_dir = "c:/Users/marco/python_version/Retrieve_HASH/FILTER_TARGET_HASHES/"


# Funzione per creare nodi e relazioni a partire da un file JSON
def create_nodes_from_json(file_path):
    try:
        with open(file_path, "r") as file:
            data = json.load(file)

        # Estrazione dei dati principali
        try:
            file_id = data["data"]["id"]
            attributes = data["data"]["attributes"]
            print(file_id)

            # Controlla se il nodo esiste già
            existing_file_node = graph.nodes.match("MalwareFile", id=file_id).first()
            if existing_file_node:
                print(f"MalwareFile {file_id} già presente nel database.")
                return

            # Creazione del nodo file principale
            file_node = Node(
                "MalwareFile",
                id=file_id,
                sha256=attributes["sha256"],
                size=attributes["size"],
                type_description=attributes["type_description"],
                last_modification_date=attributes["last_modification_date"],
                first_submission_date=attributes["first_submission_date"],
                times_submitted=attributes["times_submitted"],
            )
            graph.create(file_node)

            # Creazione dei nodi e delle relazioni per 'names'
            for name in attributes["names"]:
                name_node = graph.nodes.match("MalwareName", name=name).first()
                if not name_node:
                    name_node = Node("MalwareName", name=name)
                    graph.create(name_node)
                relation = Relationship(file_node, "HAS_NAME", name_node)
                graph.create(relation)

            # Creazione dei nodi e delle relazioni per 'type_tags'
            for tag in attributes["type_tags"]:
                tag_node = graph.nodes.match("MalwareTag", tag=tag).first()
                if not tag_node:
                    tag_node = Node("MalwareTag", tag=tag)
                    graph.create(tag_node)
                relation = Relationship(file_node, "HAS_TAG", tag_node)
                graph.create(relation)

            # Creazione dei nodi e delle relazioni per 'popular_threat_classification'
            threat_label = attributes["popular_threat_classification"][
                "suggested_threat_label"
            ]
            threat_label_node = graph.nodes.match(
                "ThreatLabel", label=threat_label
            ).first()
            if not threat_label_node:
                threat_label_node = Node("ThreatLabel", label=threat_label)
                graph.create(threat_label_node)
            relation = Relationship(file_node, "HAS_THREAT_LABEL", threat_label_node)
            graph.create(relation)

            for threat in attributes["popular_threat_classification"][
                "popular_threat_name"
            ]:
                threat_name_node = graph.nodes.match(
                    "PopularThreatName", name=threat["value"]
                ).first()
                if not threat_name_node:
                    threat_name_node = Node(
                        "PopularThreatName", name=threat["value"], count=threat["count"]
                    )
                    graph.create(threat_name_node)
                relation = Relationship(
                    file_node, "HAS_POPULAR_THREAT_NAME", threat_name_node
                )
                graph.create(relation)

            for category in attributes["popular_threat_classification"][
                "popular_threat_category"
            ]:
                threat_category_node = graph.nodes.match(
                    "PopularThreatCategory", category=category["value"]
                ).first()
                if not threat_category_node:
                    threat_category_node = Node(
                        "PopularThreatCategory",
                        category=category["value"],
                        count=category["count"],
                    )
                    graph.create(threat_category_node)
                relation = Relationship(
                    file_node, "HAS_POPULAR_THREAT_CATEGORY", threat_category_node
                )
                graph.create(relation)

            # Creazione dei nodi e delle relazioni per 'last_analysis_results'
            for engine, result in attributes["last_analysis_results"].items():
                engine_node = graph.nodes.match("AnalysisEngine", name=engine).first()
                if not engine_node:
                    engine_node = Node("AnalysisEngine", name=engine)
                    graph.create(engine_node)
                analysis_result_node = Node(
                    "AnalysisResult",
                    engine_name=engine,
                    category=result["category"],
                    result=result["result"],
                    method=result["method"],
                    engine_version=result["engine_version"],
                    engine_update=result["engine_update"],
                )
                graph.create(analysis_result_node)
                relation = Relationship(file_node, "ANALYZED_BY", analysis_result_node)
                graph.create(relation)

            # Creazione dei nodi e delle relazioni per 'vba_info'
            if "vba_info" in attributes:
                vba_info = attributes["vba_info"]
                vba_node = Node("VBAInfo")
                graph.create(vba_node)
                relation = Relationship(file_node, "HAS_VBA_INFO", vba_node)
                graph.create(relation)

                for string in vba_info["strings"]:
                    string_node = graph.nodes.match("VBAString", string=string).first()
                    if not string_node:
                        string_node = Node("VBAString", string=string)
                        graph.create(string_node)
                    relation = Relationship(vba_node, "CONTAINS_STRING", string_node)
                    graph.create(relation)

            # Creazione del nodo per 'total_votes'
            total_votes_node = Node(
                "TotalVotes",
                harmless=attributes["total_votes"]["harmless"],
                malicious=attributes["total_votes"]["malicious"],
            )
            graph.create(total_votes_node)
            relation = Relationship(file_node, "HAS_TOTAL_VOTES", total_votes_node)
            graph.create(relation)

            # Creazione del nodo per 'last_analysis_stats'
            analysis_stats = attributes["last_analysis_stats"]
            stats_node = Node(
                "AnalysisStats",
                harmless=analysis_stats["harmless"],
                type_unsupported=analysis_stats["type-unsupported"],
                suspicious=analysis_stats["suspicious"],
                confirmed_timeout=analysis_stats["confirmed-timeout"],
                timeout=analysis_stats["timeout"],
                failure=analysis_stats["failure"],
                malicious=analysis_stats["malicious"],
                undetected=analysis_stats["undetected"],
            )
            graph.create(stats_node)
            relation = Relationship(file_node, "HAS_ANALYSIS_STATS", stats_node)
            graph.create(relation)

        except Exception as e:
            print(f"Exception while processing file {file_path}: {e}")
            pass
    except Exception as e:
        print(f"Exception while reading file {file_path}: {e}")
        pass


# Navigare tra le directory e processare i file JSON
for root, dirs, files in os.walk(main_dir):
    for file in files:
        if not (file.endswith(".txt") or file.endswith(".py")):
            file_path = os.path.join(root, file)
            create_nodes_from_json(file_path)

print("Importazione completata.")
