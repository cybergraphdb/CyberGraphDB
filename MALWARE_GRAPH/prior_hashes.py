import os
import time

import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from termcolor import colored
from tqdm import tqdm

target_names = []
missed = []
failed = "FAILED_HASHES.txt"
api_key = "Byf99cLylfm1Qs2y0A94cf1lNIuUnGnS"
final_file = "TARGET_HASH.txt"

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


# Seleziona un proxy dalla lista
proxy_address = "110.238.109.146"
proxy_port = 8080

# Configura il proxy per le tue richieste HTTP/HTTPS
proxy = {
    "http": f"http://{proxy_address}:{proxy_port}",
    "https": f"https://{proxy_address}:{proxy_port}",
}


def VirusShare_Connection(hash):
    url = f"https://virusshare.com/apiv2/file?apikey={api_key}&hash={hash}"
    time.sleep(2)
    response = requests.get(url)
    return response


def handle_hash(hash):
    global missed, final_file, failed, target_names
    try:
        print(colored("HASH ==> " + hash, "blue"))
        response = VirusShare_Connection(hash)
        count = 0
        while response.content == b"" and count <= 20:
            time.sleep(2)
            print("[!] Connecting to VirusShare ...", end="\r")
            response = VirusShare_Connection(hash)
            count = count + 1
            if count == 21:
                print("[ :( ] Connection FAILED ... Don't worry, i will retry later!")
                missed.append(hash)
        # print("[!] VirusShare Response: " + str(response.status_code))
        look_for_name(hash, response)
    except Exception as e:
        print(e)
        print(response.content)


def handle_missed():
    global final_file, missed, failed, target_names
    for hash in missed:
        try:
            print(colored("HASH ==> " + hash, "blue"))
            response = VirusShare_Connection(hash)
            count = 0
            while response.content == b"" and count <= 10:
                print("[!] Connecting to VirusShare ...", end="\r")
                response = VirusShare_Connection(hash)
                count = count + 1
                if count == 11:
                    print(
                        "[ :( ] Connection FAILED ... The Hash will be inserted in the Failed file"
                    )
                    with open(failed, "a") as fail:
                        fail.write(str(hash) + "\n")

            # print("[!] VirusShare Response: " + str(response.status_code))
            look_for_name(hash, response)
        except Exception as e:
            print(e)
            print(response.content)


def look_for_name(hash, response):
    global target_names
    bingo = 0
    for name in target_names:
        json_data = response.json()
        virustotal_scans = json_data["virustotal"]["scans"]
        if name in str(virustotal_scans):
            bingo = 1
            print(colored("[OK] - " + str(hash) + " => " + name, "green"))
            print("[!] HASH : " + str(hash) + " Malware Name : " + name)
            explore_virus_total(hash, name)
            with open(final_file, "a", encoding="utf-8") as t:
                t.write("HASH : " + str(hash) + " Malware Name : " + name + "\n")
    if bingo == 0:
        print(colored("[NO] No Malware found for - " + str(hash), "red"))
    else:
        bingo = 0


def explore_virus_total(hash, name):
    try:
        headers = {
            "accept": "application/json",
            "x-apikey": "7883f503256ffab63e52ac70d6ec1fb12c039c47b5b4e72323e2974237508da0",
        }
        url = f"https://www.virustotal.com/api/v3/files/{hash}"
        response = requests.get(url, headers=headers)

        if not os.path.exists(name):
            os.mkdir(name)
            print(f"\n[!] Folder '{name}' created.")

        # Crea un file all'interno della cartella
        with open(name + "\\" + hash, "a") as file:
            file.write(response.text + "\n\n")
            print(f"\n[!] File '{hash}' created in the folder '{name}'.")
    except Exception as e:
        print(e)
        pass


def extract_complete_list():
    hashes = "C:\\Users\\marco\\python_version\\Retrieve_HASH\\HASH_LIST.txt"

    print("[!] Reading hashes... This could take few minutes.")

    f = open(hashes, "r")
    lines = f.readlines()
    found_hash = False

    for line in lines:
        if found_hash == True:
            if "#" not in line:
                if "\n" in line:
                    hash = line.replace("\n", "")
                else:
                    hash = line
                try:
                    handle_hash(hash)
                except Exception as e:
                    print(e)
                    pass
        if line.replace("\n", "") == "b44ac9d87832a049a51a4b3debc2f2b9":
            print("[!] Found Starting Hash : " + line)
            found_hash = True


def extract_target_names():
    global target_names
    target_file = open(
        "Malware-Names.txt", "r"
    )  # "C:\\Users\\marco\\python_version\\Retrieve_HASH\\MITRE_names\\Malware-Names.txt", 'r')
    lines = target_file.readlines()
    print("[!] Reading Target Names ...")
    for line in tqdm(lines):
        if "\n" in line:
            name = line.replace("\n", "")
        else:
            name = line
        target_names.append(name)


extract_target_names()
extract_complete_list()
handle_missed()
