from py2neo import Graph
import pandas as pd

# Connessione a Neo4j
graph = Graph("bolt://localhost:7687", auth=("neo4j", "scottdirT98"))

def run_query(query):
    return graph.run(query).to_data_frame()

# Query 1: Malware con più nomi associati
query1 = """
MATCH (m:MalwareFile)-[:HAS_NAME]->(n:MalwareName)
WITH m, COUNT(n) AS nameCount
WHERE nameCount > 1
RETURN m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`, nameCount AS `Number of Names`
ORDER BY nameCount DESC
"""
result1 = run_query(query1)
print("Malware con più nomi associati:")
print(result1)

# Query 2: Malware con specifici tag
query2 = """
MATCH (m:MalwareFile)-[:HAS_TAG]->(t:MalwareTag)
WHERE t.tag IN ['executable', 'dos']
RETURN DISTINCT m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`
"""
result2 = run_query(query2)
print("\nMalware con specifici tag (executable, dos):")
print(result2)

# Query 3: Malware classificati come specifiche minacce
query3 = """
MATCH (m:MalwareFile)-[:CLASSIFIED_AS]->(th:ThreatName)
WHERE th.name = 'zusy'
RETURN m.id AS `Malware ID`, m.sha256 AS `SHA256 Hash`, th.count AS `Threat Count`
ORDER BY `Threat Count` DESC
"""
result3 = run_query(query3)
print("\nMalware classificati come virus:")
print(result3)

# Query 4: Engines che identificano malware specifici
specific_sha256 = '9a53522752be11dc99d784637a6aed839417fb4ef40f3da23e177e19f32fcc3e'  # Sostituisci con SHA256 specifico
query4 = f"""
MATCH (m:MalwareFile {{sha256: '{specific_sha256}'}})-[:ANALYZED_BY]->(e:AnalysisEngine)
RETURN e.name AS `Analysis Engine`, e.result AS `Detection Result`
"""
result4 = run_query(query4)
print(f"\nEngines che identificano malware con SHA256 {specific_sha256}:")
print(result4)

# Query 5: Numero di malware per tipo di descrizione
query5 = """
MATCH (m:MalwareFile)
RETURN m.type_description AS `Type Description`, COUNT(m) AS `Malware Count`
ORDER BY `Malware Count` DESC
"""
result5 = run_query(query5)
print("\nNumero di malware per tipo di descrizione:")
print(result5)

# Query 6: Malware che condividono gli stessi nomi
query6 = """
MATCH (m1:MalwareFile)-[:HAS_NAME]->(n:MalwareName)<-[:HAS_NAME]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN n.name AS `Common Name`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result6 = run_query(query6)
print("Malware che condividono gli stessi nomi:")
print(result6)

# Query 7: Malware che condividono gli stessi tag
query7 = """
MATCH (m1:MalwareFile)-[:HAS_TAG]->(t:MalwareTag)<-[:HAS_TAG]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN t.tag AS `Common Tag`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result7 = run_query(query7)
print("\nMalware che condividono gli stessi tag:")
print(result7)

# Query 8: Malware che sono stati analizzati dagli stessi motori
query8 = """
MATCH (m1:MalwareFile)-[:ANALYZED_BY]->(e:AnalysisEngine)<-[:ANALYZED_BY]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN e.name AS `Common Analysis Engine`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result8 = run_query(query8)
print("\nMalware che sono stati analizzati dagli stessi motori:")
print(result8)

# Query 9: Malware che condividono gli stessi tipi di minacce
query9 = """
MATCH (m1:MalwareFile)-[:CLASSIFIED_AS]->(t:ThreatName)<-[:CLASSIFIED_AS]-(m2:MalwareFile)
WHERE m1 <> m2
RETURN t.name AS `Common Threat`, COLLECT(DISTINCT m1.id) AS `Malware IDs`, COLLECT(DISTINCT m1.sha256) AS `SHA256 Hashes`
"""
result9 = run_query(query9)
print("\nMalware che condividono gli stessi tipi di minacce:")
print(result9)

# Query 10: Malware con dimensioni simili (ad esempio, +/- 100 bytes)
query10 = """
MATCH (m1:MalwareFile), (m2:MalwareFile)
WHERE m1 <> m2 AND ABS(m1.size - m2.size) <= 100
RETURN m1.id AS `Malware ID 1`, m1.sha256 AS `SHA256 Hash 1`, m2.id AS `Malware ID 2`, m2.sha256 AS `SHA256 Hash 2`, m1.size AS `Size 1`, m2.size AS `Size 2`
"""
result10 = run_query(query10)
print("\nMalware con dimensioni simili (+/- 100 bytes):")
print(result10)
