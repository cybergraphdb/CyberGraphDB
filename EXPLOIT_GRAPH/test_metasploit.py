from neo4j import GraphDatabase


class Neo4jDatabaseTester:
    def __init__(self, uri, user, password):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def run_query(self, query):
        with self.driver.session() as session:
            result = session.run(query)
            return result.data()

    def run_tests(self):
        tests = {
            "Total Number of Metasploit Nodes": "MATCH (n) WHERE n.created_by_script = true RETURN COUNT(n) AS TotalNodes",
            "Total Number of Metasploit Relationships": "MATCH ()-[r]->() WHERE r.created_by_script = true RETURN COUNT(r) AS TotalRelationships",
            "Number of Metasploit Nodes by Label": "MATCH (n) WHERE n.created_by_script = true RETURN LABELS(n) AS NodeLabels, COUNT(n) AS NodeCount ORDER BY NodeCount DESC",
            "Number of Metasploit Relationships by Type": "MATCH ()-[r]->() WHERE r.created_by_script = true RETURN TYPE(r) AS RelationshipType, COUNT(r) AS RelationshipCount ORDER BY RelationshipCount DESC",
            "Number of Metasploit Nodes with Specific Property": "MATCH (n) WHERE n.created_by_script = true AND EXISTS(n.someProperty) RETURN COUNT(n) AS NodesWithProperty",
            "Number of MetasploitScript Nodes": "MATCH (n:MetasploitScript) WHERE n.created_by_script = true RETURN COUNT(n) AS MetasploitScriptNodes",
            "Number of Relationships between Author and MetasploitScript": "MATCH (a:Author)-[r:CREATED]->(m:MetasploitScript) WHERE a.created_by_script = true AND r.created_by_script = true AND m.created_by_script = true RETURN COUNT(r) AS AuthorToScriptRelationships",
            "Distribution of Nodes by Script Type": "MATCH (n:MetasploitScript) WHERE n.created_by_script = true RETURN n.script_type AS ScriptType, COUNT(n) AS Count ORDER BY Count DESC",
            "Average Degree of Metasploit Nodes": "MATCH (n) WHERE n.created_by_script = true RETURN AVG(SIZE((n)--())) AS AverageNodeDegree",
            "Nodes with Highest Number of Relationships": "MATCH (n) WHERE n.created_by_script = true RETURN n.name AS NodeName, SIZE((n)--()) AS Degree ORDER BY Degree DESC LIMIT 10",
            "Nodes Created Each Year": "MATCH (n) WHERE n.created_by_script = true AND EXISTS(n.createdDate) RETURN SUBSTRING(n.createdDate, 0, 4) AS Year, COUNT(n) AS Count ORDER BY Year",
            "Data Integrity Test": "MATCH (n:MetasploitScript) WHERE n.created_by_script = true AND (n.name IS NULL OR n.script_type IS NULL OR n.target_type IS NULL) RETURN n.name AS Name, n.script_type AS ScriptType, n.target_type AS TargetType",
            "Uniqueness Test": "MATCH (n:MetasploitScript) WHERE n.created_by_script = true WITH n.name AS Name, COUNT(n) AS Count WHERE Count > 1 RETURN Name, Count",
            "Reference Consistency Test": "MATCH (n:MetasploitScript)-[:HAS_REFERENCES]->(refs:References) WHERE n.created_by_script = true AND refs.created_by_script = true AND (refs.details IS NULL OR refs.details = '') RETURN n.name AS Name, refs.details AS References",
            "Author Linkage Test": "MATCH (n:MetasploitScript)-[:CREATED]->(author:Author) WHERE n.created_by_script = true AND author.created_by_script = true AND (author.name IS NULL OR author.name = '') RETURN n.name AS Name, author.name AS Author",
            "Payload Validity Test": "MATCH (n:MetasploitScript)-[:HAS_PAYLOAD]->(payload:Payload) WHERE n.created_by_script = true AND payload.created_by_script = true AND (payload.details IS NULL OR payload.details = '') RETURN n.name AS Name, payload.details AS Payload",
            "Storage Size (Bytes)": "CALL apoc.meta.stats() YIELD bytes RETURN bytes.totalStoreSize AS TotalStoreSize",
        }

        for test_name, query in tests.items():
            result = self.run_query(query)
            print(f"--- {test_name} ---")
            for record in result:
                print(record)
            print()

    def convert_bytes_to_gb(self, bytes_size):
        return bytes_size / (1024**3)

    def run_storage_size_test(self):
        query = "CALL apoc.meta.stats() YIELD bytes RETURN bytes.totalStoreSize AS TotalStoreSize"
        result = self.run_query(query)
        if result:
            total_bytes = result[0].get("TotalStoreSize", 0)
            total_gb = self.convert_bytes_to_gb(total_bytes)
            print(f"Total Storage Size: {total_gb:.2f} GB")


if __name__ == "__main__":
    uri = "bolt://localhost:7688"
    user = "neo4j"
    password = ""

    tester = Neo4jDatabaseTester(uri, user, password)
    tester.run_tests()
    tester.run_storage_size_test()
    tester.close()
