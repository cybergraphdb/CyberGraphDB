import os
import re
from py2neo import Graph, Node, Relationship

# Connessione a Neo4j
graph = Graph("bolt://localhost:7688", auth=("neo4j", "scottdirT98"))

# Funzione per estrarre le informazioni dal file .rb
def extract_info_from_rb(file_path):
    with open(file_path, 'r') as file:
        content = file.read()

    def get_match(pattern, content, group_num=1, default=None):
        match = re.search(pattern, content)
        return match.group(group_num) if match else default

    info = {
        'Name': get_match(r"'Name'\s*=>\s*'([^']+)'", content, default='Unknown'),
        'Description': get_match(r"'Description'\s*=>\s*%q{([^}]+)}", content, default='No description provided'),
        'Author': re.findall(r"'Author'\s*=>\s*\[\s*([^\]]+)\s*\]", content),
        'References': re.findall(r"\['([^']+)',\s*'([^']+)'\]", content),
        'Payload': get_match(r"'Payload'\s*=>\s*({[^}]+})", content, default='{}'),
        'Code': content
    }

    # Split and clean author list
    if info['Author']:
        info['Author'] = re.findall(r"'([^']+)'", info['Author'][0])

    return info

# Funzione per creare i nodi e le relazioni a partire dalle informazioni estratte
def create_metasploit_graph(info, script_type, target_type):
    try:
        # Creazione del nodo principale per lo script Metasploit (Name)
        script_node = Node("MetasploitScript", name=info['Name'], script_type=script_type, target_type=target_type)
        graph.merge(script_node, "MetasploitScript", "name")

        # Creazione del nodo Description e relazione con il nodo principale
        description_node = Node("MetasploitDescription", description=info['Description'])
        graph.merge(description_node, "MetasploitDescription", "description")
        description_relationship = Relationship(script_node, "HAS_DESCRIPTION", description_node)
        graph.merge(description_relationship)

        # Creazione del nodo Payload e relazione con il nodo principale
        payload_node = Node("Payload", details=info['Payload'])
        graph.merge(payload_node, "Payload", "details")
        payload_relationship = Relationship(script_node, "HAS_PAYLOAD", payload_node)
        graph.merge(payload_relationship)

        # Creazione del nodo Code e relazione con il nodo principale
        code_node = Node("Code", content=info['Code'])
        graph.merge(code_node, "Code", "content")
        code_relationship = Relationship(script_node, "HAS_CODE", code_node)
        graph.merge(code_relationship)

        # Creazione dei nodi per gli autori e relazioni con il nodo principale
        if info['Author']:
            for author in info['Author']:
                author_node = Node("Author", name=author)
                graph.merge(author_node, "Author", "name")
                author_relationship = Relationship(author_node, "CREATED", script_node)
                graph.merge(author_relationship)

        # Creazione di un nodo per tutte le references e relazione con il nodo principale
        if info['References']:
            references_str = ", ".join([f"{ref[0]}: {ref[1]}" for ref in info['References']])
            references_node = Node("References", details=references_str)
            graph.merge(references_node, "References", "details")
            references_relationship = Relationship(script_node, "HAS_REFERENCES", references_node)
            graph.merge(references_relationship)

    except KeyError as e:
        print(f"Errore di chiave mancante nei dati: {e}")
    except Exception as e:
        print(f"Errore imprevisto: {e}")

# Percorso della cartella contenente i file .rb
base_path = 'C:/Users/marco/python_version/METASPLOIT_DB/METASPLOIT_DB'  # Sostituisci con il percorso corretto

# Itera attraverso tutti i file .rb nelle sottocartelle
for root, dirs, files in os.walk(base_path):
    for file in files:
        if file.endswith('.rb'):
            file_path = os.path.join(root, file)
            try:
                script_type = os.path.basename(os.path.dirname(os.path.dirname(file_path)))  # Tipo di script
                target_type = os.path.basename(os.path.dirname(file_path))  # Target

                info = extract_info_from_rb(file_path)
                create_metasploit_graph(info, script_type, target_type)
            except Exception as e:
                print(f"Errore imprevisto durante l'elaborazione del file {file_path}: {e}")
