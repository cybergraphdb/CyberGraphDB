import os
import re
import logging
from py2neo import Graph, Node, Relationship

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Connect to Neo4j
graph = Graph("bolt://localhost:7688", auth=("neo4j", ""))

# Function to extract information from the .rb file
def extract_info_from_rb(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        content = file.read()

    def get_match(pattern, content, group_num=1, default=None):
        match = re.search(pattern, content)
        return match.group(group_num) if match else default

    info = {
        "Name": get_match(r"'Name'\s*=>\s*'([^']+)'", content, default="Unknown"),
        "Description": get_match(
            r"'Description'\s*=>\s*%q{([^}]+)}",
            content,
            default="No description provided",
        ),
        "Author": re.findall(r"'Author'\s*=>\s*\[\s*([^\]]+)\s*\]", content),
        "References": re.findall(r"\['([^']+)',\s*'([^']+)'\]", content),
        "Payload": get_match(r"'Payload'\s*=>\s*({[^}]+})", content, default="{}"),
        "Code": content,
    }

    # Split and clean author list
    if info["Author"]:
        info["Author"] = re.findall(r"'([^']+)'", info["Author"][0])

    return info

# Function to create nodes and relationships from the extracted information
def create_metasploit_graph(info, script_type, target_type):
    try:
        # Create the main node for the Metasploit script (Name)
        script_node = Node(
            "MetasploitScript",
            name=info["Name"],
            script_type=script_type,
            target_type=target_type,
        )
        graph.merge(script_node, "MetasploitScript", "name")

        # Create the Description node and relationship with the main node
        description_node = Node(
            "MetasploitDescription", description=info["Description"]
        )
        graph.merge(description_node, "MetasploitDescription", "description")
        description_relationship = Relationship(
            script_node, "HAS_DESCRIPTION", description_node
        )
        graph.merge(description_relationship)

        # Create the Payload node and relationship with the main node
        payload_node = Node("Payload", details=info["Payload"])
        graph.merge(payload_node, "Payload", "details")
        payload_relationship = Relationship(script_node, "HAS_PAYLOAD", payload_node)
        graph.merge(payload_relationship)

        # Create the Code node and relationship with the main node
        code_node = Node("Code", content=info["Code"])
        graph.merge(code_node, "Code", "content")
        code_relationship = Relationship(script_node, "HAS_CODE", code_node)
        graph.merge(code_relationship)

        # Create nodes for the authors and relationships with the main node
        if info["Author"]:
            for author in info["Author"]:
                author_node = Node("Author", name=author)
                graph.merge(author_node, "Author", "name")
                author_relationship = Relationship(author_node, "CREATED", script_node)
                graph.merge(author_relationship)

        # Create a node for all references and relationship with the main node
        if info["References"]:
            references_str = ", ".join(
                [f"{ref[0]}: {ref[1]}" for ref in info["References"]]
            )
            references_node = Node("References", details=references_str)
            graph.merge(references_node, "References", "details")
            references_relationship = Relationship(
                script_node, "HAS_REFERENCES", references_node
            )
            graph.merge(references_relationship)

    except KeyError as e:
        logging.error(f"Missing key in data: {e}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

# Path to the directory containing the .rb files
base_path = "METASPLOIT_DB/METASPLOIT_DB"  # Replace with the correct path

# Iterate through all .rb files in the subdirectories
for root, dirs, files in os.walk(base_path):
    for file in files:
        if file.endswith(".rb"):
            file_path = os.path.join(root, file)
            try:
                script_type = os.path.basename(
                    os.path.dirname(os.path.dirname(file_path))
                )  # Script type
                target_type = os.path.basename(os.path.dirname(file_path))  # Target

                info = extract_info_from_rb(file_path)
                create_metasploit_graph(info, script_type, target_type)
            except Exception as e:
                logging.error(f"Unexpected error processing file {file_path}: {e}")
